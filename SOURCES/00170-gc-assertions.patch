diff -up Python-2.7.11/Lib/test/test_gc.py.gc-assertions Python-2.7.11/Lib/test/test_gc.py
--- Python-2.7.11/Lib/test/test_gc.py.gc-assertions	2015-12-13 17:29:01.696502634 +0000
+++ Python-2.7.11/Lib/test/test_gc.py	2015-12-13 17:31:32.528681221 +0000
@@ -1,6 +1,7 @@
 import unittest
-from test.test_support import verbose, run_unittest, start_threads
+from test.test_support import verbose, run_unittest, start_threads, import_module
 import sys
+import sysconfig
 import time
 import gc
 import weakref
@@ -38,6 +39,8 @@ class GC_Detector(object):
         self.wr = weakref.ref(C1055820(666), it_happened)
 
 
+BUILT_WITH_NDEBUG = ('-DNDEBUG' in sysconfig.get_config_vars()['PY_CFLAGS'])
+
 ### Tests
 ###############################################################################
 
@@ -541,6 +544,39 @@ class GCTests(unittest.TestCase):
             # would be damaged, with an empty __dict__.
             self.assertEqual(x, None)
 
+    @unittest.skipIf(BUILT_WITH_NDEBUG,
+                     'built with -NDEBUG')
+    def test_refcount_errors(self):
+        # Verify the "handling" of objects with broken refcounts
+
+        import_module("ctypes") #skip if not supported
+
+        import subprocess
+        code = '''if 1:
+        a = []
+        b = [a]
+
+        # Simulate the refcount of "a" being too low (compared to the
+        # references held on it by live data), but keeping it above zero
+        # (to avoid deallocating it):
+        import ctypes
+        ctypes.pythonapi.Py_DecRef(ctypes.py_object(a))
+
+        # The garbage collector should now have a fatal error when it reaches
+        # the broken object:
+        import gc
+        gc.collect()
+        '''
+        p = subprocess.Popen([sys.executable, "-c", code],
+                             stdout=subprocess.PIPE,
+                             stderr=subprocess.PIPE)
+        stdout, stderr = p.communicate()
+        p.stdout.close()
+        p.stderr.close()
+        # Verify that stderr has a useful error message:
+        self.assertRegexpMatches(stderr,
+            b'Modules/gcmodule.c:[0-9]+: visit_decref: Assertion `gc->gc.gc_refs != 0\' failed.')
+
 class GCTogglingTests(unittest.TestCase):
     def setUp(self):
         gc.enable()
